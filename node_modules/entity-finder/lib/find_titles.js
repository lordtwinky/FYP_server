'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var debug = require('debug')('entity-finder');
var wikiData = require('wikipedia-data');
var utils = require("./utils");
var wikiApi = require("./wikipedia/api");
function findTitles(name, lang, options) {
    if (options === void 0) { options = {}; }
    name = name.split('|')[0];
    var limit = options.limit || 2;
    var tags;
    if (options.tags) {
        if (!Array.isArray(options.tags)) {
            options.tags = [options.tags];
        }
        tags = options.tags.map(function (tag) {
            return new RegExp('(^|\\b)' + tag + '(\\b|$)', 'gi');
        });
    }
    var wordsCount = utils.countWords(name);
    return wikiApi.openSearch(lang, name, { profile: options.profile, limit: limit + 2 })
        .then(function (result) {
        var list = [];
        for (var i = 0; i < result[1].length; i++) {
            var title = formatTitle(result[1][i]);
            title.description = result[2][i];
            list.push(title);
        }
        debug('findTitles', name, lang, limit, tags);
        if (tags && tags.length) {
            return orderByTags(list, tags);
        }
        return list;
    })
        .then(function (list) {
        debug('unfiltered titles', list);
        var titles = [];
        for (var i = 0; i < list.length; i++) {
            var title = list[i];
            if (isAbbr(name, title.simple || title.title)) {
                titles.push(title);
                continue;
            }
            if (isComplex(name, title.simple || title.title)) {
                titles.push(title);
                continue;
            }
            if (!filterOneWordName(name, title.simple || title.title)) {
                continue;
            }
            var titleWordsCount = utils.countWords(title.title);
            if (title.simple) {
                var disName = getDisambiguationNames(lang);
                if (disName === title.special || disName.toLowerCase() === title.special) {
                    continue;
                }
            }
            else {
                if (titleWordsCount !== wordsCount) {
                    continue;
                }
            }
            titles.push(title);
        }
        titles = titles.slice(0, limit);
        debug('filterd titles', titles);
        return titles;
    });
}
exports.findTitles = findTitles;
function formatTitle(title) {
    var result = /\(([^)]+)\)$/i.exec(title);
    var pageTitle = {
        title: title
    };
    if (result) {
        pageTitle.simple = pageTitle.title.substr(0, result.index).trim();
        pageTitle.special = result[1];
    }
    return pageTitle;
}
function getDisambiguationNames(lang) {
    return wikiData.getDisambiguationNames2()[lang];
}
function filterOneWordName(name, title) {
    var wordsCount1 = utils.countWords(name);
    if (wordsCount1 === 1 && name.length !== title.length) {
        return false;
    }
    return true;
}
function isAbbr(name, title) {
    var words = title.split(/[\s-]+/g);
    if (words.length >= name.length) {
        return true;
    }
    return false;
}
function isComplex(name, title) {
    title = title.split(',');
    if (title.length > 1) {
        title = title[0];
        var wordsCount = utils.countWords(name);
        var titleWordsCount = utils.countWords(title);
        if (wordsCount === 1 && titleWordsCount === 1 && name.length === title.length) {
            return true;
        }
        if (wordsCount > 1 && wordsCount === titleWordsCount) {
            return true;
        }
    }
    return false;
}
function orderByTags(list, tags) {
    debug('Unordered by tags', utils._.map(list, 'title'));
    var sortList = list.filter(function (item, i) {
        var score = 0;
        tags.forEach(function (tag) {
            if (tag.test(item.title)) {
                score -= 2;
            }
            if (tag.test(item.description)) {
                score -= 1;
            }
        });
        if (score) {
            item.tempScore = score;
            item.tempIndex = i;
            return true;
        }
        return false;
    })
        .sort(function (a, b) {
        return a.tempScore - b.tempScore;
    });
    if (sortList.length) {
        sortList.forEach(function (item) { list.splice(item.tempIndex, 1); });
        for (var i = sortList.length - 1; i >= 0; i--) {
            list.unshift(sortList[i]);
            delete sortList[i].tempScore;
            delete sortList[i].tempIndex;
        }
    }
    debug('Ordered by tags', utils._.map(list, 'title'));
    return list;
}
