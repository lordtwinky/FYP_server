"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var wikidata_1 = require("./wikidata");
var api_1 = require("./wikipedia/api");
function getEntities(params) {
    var lang = params.language || 'en';
    return wikidata_1.getEntities(params)
        .then(function (wikiDataEntities) {
        var entities = wikiDataEntities;
        var ids = Object.keys(entities);
        if (ids.length === 0) {
            return entities;
        }
        var tasks = [];
        if (params.extract) {
            var titles_1 = getEntitiesTitles(lang, entities);
            var stringTitles = utils_1._.map(titles_1, 'title').join('|');
            tasks.push(api_1.getExtracts({ lang: lang, titles: stringTitles, sentences: params.extract })
                .then(function (extracts) {
                extracts.forEach(function (item) {
                    var it = utils_1._.find(titles_1, { title: item.title });
                    if (it) {
                        utils_1._.set(entities, [it.id, 'extract'].join('.'), item.extract);
                    }
                });
            }));
        }
        if (params.redirects) {
            tasks.push(utils_1.Promise.map(ids, function (id) {
                if (entities[id].sitelinks && entities[id].sitelinks[lang]) {
                    return api_1.getRedirects(lang, entities[id].sitelinks[lang])
                        .then(function (redirects) {
                        entities[id].redirects = redirects;
                    });
                }
            }));
        }
        if (params.types === true || Array.isArray(params.types)) {
            var prefixes_1 = Array.isArray(params.types) ? params.types : null;
            tasks.push(utils_1.Promise.map(ids, function (id) {
                return wikidata_1.getEntityTypes(id, prefixes_1)
                    .then(function (types) {
                    entities[id].types = types;
                });
            }));
        }
        return utils_1.Promise.all(tasks).then(function () { return entities; });
    }).then(function (resultEntities) {
        return Object.keys(resultEntities).map(function (id) { return resultEntities[id]; });
    });
}
exports.getEntities = getEntities;
function getEntitiesTitles(lang, entities) {
    var titles = [];
    Object.keys(entities).forEach(function (id) {
        var entity = entities[id];
        var added = false;
        if (entity.sitelinks) {
            var title = entity.sitelinks[lang];
            if (title) {
                added = true;
                titles.push({ title: title, id: entity.id });
            }
        }
        if (!added && entity.label) {
            titles.push({ id: entity.id, title: entity.label });
        }
    });
    return titles;
}
