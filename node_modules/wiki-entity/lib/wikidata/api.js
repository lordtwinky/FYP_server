"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var request_1 = require("../request");
var API_URL = 'https://www.wikidata.org/w/api.php';
function getEntities(params) {
    var qs = {
        action: 'wbgetentities',
        ids: getStringArrayParam(params.ids),
        titles: getStringArrayParam(params.titles),
        props: getStringArrayParam(params.props, 'info|sitelinks|aliases|labels|descriptions|claims|datatype'),
        languages: getStringArrayParam(params.language, 'en'),
        redirects: params.redirect || 'yes',
        format: 'json',
        sites: null
    };
    if (params.titles) {
        qs.sites = qs.languages.split('|')[0] + 'wiki';
    }
    else {
        delete qs.sites;
    }
    return request_1.default({ qs: qs, url: API_URL })
        .then(function (data) {
        if (hasError(data)) {
            return utils_1.Promise.reject(getError(data));
        }
        return data && data.entities || {};
    });
}
exports.getEntities = getEntities;
function getManyEntities(params) {
    try {
        validateParams(params);
    }
    catch (e) {
        return utils_1.Promise.reject(e);
    }
    var keyName = (!!params.ids) ? 'ids' : 'titles';
    var keyValues = params[keyName].split('|');
    var max = 50;
    var countParts = keyValues.length / max + 1;
    var parts = [];
    for (var i = 0; i < countParts && i < 4; i++) {
        var partParams = utils_1._.clone(params);
        partParams[keyName] = keyValues.slice(i * max, (i + 1) * max).join('|');
        if (partParams[keyName].length > 0) {
            parts.push(getEntities(partParams));
        }
    }
    return utils_1.Promise.all(parts).then(function (results) {
        if (results.length === 0) {
            return results;
        }
        if (results.length > 1) {
            for (var i = 1; i < results.length; i++) {
                utils_1._.assign(results[0], results[i]);
            }
        }
        return results[0];
    });
}
exports.getManyEntities = getManyEntities;
function validateParams(params) {
    if (!params.ids && !params.titles) {
        throw new Error('Invalid params: `ids` or `titles` are required');
    }
}
exports.validateParams = validateParams;
function getError(data) {
    return data && data.error && new Error(data.error.info || 'Wikidata Api Error') || new Error('NO error');
}
function hasError(data) {
    return !!data.error;
}
function getStringArrayParam(value, def) {
    if (def === void 0) { def = null; }
    if (!value || value.length === 0) {
        return def;
    }
    return value;
}
