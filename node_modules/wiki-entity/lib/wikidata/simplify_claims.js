"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function simplifyClaims(claims) {
    var simpleClaims = {};
    for (var id in claims) {
        var propClaims = claims[id];
        simpleClaims[id] = simplifyPropertyClaims(propClaims, id);
    }
    return simpleClaims;
}
exports.simplifyClaims = simplifyClaims;
function simplifyPropertyClaims(propClaims, id) {
    var prop = {
        id: id,
        values: propClaims.map(function (claim) { return simplifyClaim(claim); }).filter(nonNull)
    };
    return prop;
}
exports.simplifyPropertyClaims = simplifyPropertyClaims;
function simplifyClaim(claim) {
    var mainsnak = claim.mainsnak, qualifiers = claim.qualifiers;
    if (mainsnak === null)
        return null;
    var datatype = mainsnak.datatype, datavalue = mainsnak.datavalue;
    if (datavalue === null || datavalue === undefined)
        return null;
    var value = null;
    var value_string;
    switch (datatype) {
        case 'string':
        case 'commonsMedia':
        case 'url':
        case 'external-id':
            value = datavalue.value;
            break;
        case 'monolingualtext':
            value = datavalue.value.text;
            break;
        case 'wikibase-item':
            value = datavalue.value.id;
            break;
        case 'wikibase-property':
            value = datavalue.value;
            break;
        case 'time':
            value = datavalue.value;
            value_string = stringDatetime(datavalue.value);
            break;
        case 'quantity':
            value = datavalue.value;
            value_string = parseFloat(datavalue.value.amount).toString();
            break;
        case 'globe-coordinate':
            value = datavalue.value;
            value_string = getLatLngFromCoordinates(datavalue.value).join(',');
            break;
    }
    var result = {
        datatype: datatype,
        value: value,
    };
    if (value_string) {
        result['value_string'] = value_string;
    }
    return result;
}
exports.simplifyClaim = simplifyClaim;
var getLatLngFromCoordinates = function (value) { return [value.latitude, value.longitude]; };
var prepareQualifierClaim = function (claim) { return ({ mainsnak: claim }); };
var nonNull = function (obj) { return obj != null; };
var stringDatetime = function (value) {
    var date = value.time;
    var p = value.precision;
    if (p >= 9) {
        date = date.substr(1);
        if (p < 12) {
            date = date.split('T')[0];
            if (p === 10) {
                date = date.split('-').slice(0, 2).join('-');
            }
            else if (p === 9) {
                date = date.split('-')[0];
            }
        }
    }
    return date;
};
