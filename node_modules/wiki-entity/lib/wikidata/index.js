"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var api_1 = require("./api");
var simplify_entity_1 = require("./simplify_entity");
var get_entity_types_1 = require("./get_entity_types");
exports.getEntityTypes = get_entity_types_1.getEntityTypes;
function getEntities(params) {
    var claims = params.claims || 'none';
    var lang = params.language || 'en';
    return api_1.getManyEntities(params)
        .then(function (entities) {
        var ids = Object.keys(entities);
        ids.forEach(function (id) { entities[id] = simplify_entity_1.simplifyEntity(lang, entities[id]); });
        var tasks = [];
        if (~['all', 'property'].indexOf(claims)) {
            tasks.push(exploreEntitiesProperties(entities, lang));
        }
        if (~['all', 'item'].indexOf(claims)) {
            tasks.push(utils_1.Promise.each(ids, function (id) {
                return exploreEntityClaims(entities[id].claims, { language: lang });
            }));
        }
        return utils_1.Promise.all(tasks).then(function () { return entities; });
    });
}
exports.getEntities = getEntities;
function exploreEntitiesProperties(entities, lang) {
    var ids = [];
    var paths = {};
    var entitiesIds = Object.keys(entities);
    entitiesIds.forEach(function (entityId) {
        var entity = entities[entityId];
        if (entity.claims) {
            ids = ids.concat(Object.keys(entity.claims));
        }
    });
    if (!ids.length) {
        return utils_1.Promise.resolve();
    }
    ids = utils_1._.uniq(ids);
    return getEntities({
        ids: ids.join('|'),
        language: lang,
        props: 'info|labels|descriptions|datatype',
        claims: 'none'
    }).then(function (properties) {
        Object.keys(properties).forEach(function (propertyId) {
            entitiesIds.forEach(function (entityId) {
                var entity = entities[entityId];
                if (entity.claims && entity.claims[propertyId]) {
                    if (entity.claims && entity.claims[propertyId]) {
                        for (var prop in properties[propertyId]) {
                            if (~['label', 'description'].indexOf(prop)) {
                                entity.claims[propertyId][prop] = properties[propertyId][prop];
                            }
                        }
                    }
                }
            });
        });
        return null;
    });
}
function exploreEntityClaims(claims, params) {
    if (!claims) {
        return utils_1.Promise.resolve();
    }
    var ids = [];
    var paths = {};
    Object.keys(claims).forEach(function (property) {
        claims[property].values.forEach(function (propertyValue, index) {
            if (propertyValue.datatype === 'wikibase-item') {
                var id = propertyValue.value;
                paths[id] = paths[id] || [];
                paths[id].push({ pid: property, value: propertyValue, index: index });
                if (ids.indexOf(id) < 0) {
                    ids.push(id);
                }
            }
        });
    });
    if (ids.length === 0) {
        return utils_1.Promise.resolve();
    }
    params.ids = ids.join('|');
    params.props = params.props || 'info|labels|descriptions|datatype';
    params.claims = params.claims || 'none';
    return getEntities(params).then(function (entities) {
        Object.keys(entities).forEach(function (id) {
            var item = entities[id];
            var pa = paths[item.id];
            pa.forEach(function (pai) {
                var val = claims[pai.pid].values[pai.index];
                for (var prop in item) {
                    if (~['label', 'pageid', 'description'].indexOf(prop)) {
                        val[prop] = item[prop];
                    }
                }
            });
        });
    });
}
exports.exploreEntityClaims = exploreEntityClaims;
