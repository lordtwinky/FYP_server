"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("../utils");
var request_1 = require("../request");
var API_URL = 'https://$lang.wikipedia.org/w/api.php';
function getExtracts(params) {
    var qs = {
        action: 'query',
        titles: getStringArrayParam(params.titles),
        exsentences: params.sentences || 3,
        prop: 'extracts',
        explaintext: true,
        exintro: true,
        exlimit: 'max',
        exsectionformat: 'plain',
        format: 'json'
    };
    return request_1.default({ qs: qs, url: API_URL.replace('$lang', params.lang) })
        .then(function (data) {
        if (hasError(data)) {
            return utils_1.Promise.reject(getError(data));
        }
        if (data && data.query && data.query.pages) {
            return Object.keys(data.query.pages).map(function (id) { return data.query.pages[id]; });
        }
        return [];
    });
}
exports.getExtracts = getExtracts;
function getExtract(lang, title, sentences) {
    return getExtracts({
        lang: lang,
        titles: title,
        sentences: sentences
    }).then(function (extracts) {
        if (extracts.length) {
            return extracts[0];
        }
        return null;
    });
}
exports.getExtract = getExtract;
function getRedirects(lang, title) {
    var qs = {
        action: 'query',
        generator: 'redirects',
        titles: title,
        grdlimit: 'max',
        format: 'json'
    };
    return request_1.default({ qs: qs, url: API_URL.replace('$lang', lang) })
        .then(function (data) {
        if (hasError(data)) {
            return utils_1.Promise.reject(getError(data));
        }
        if (data && data.query && data.query.pages) {
            return Object.keys(data.query.pages).map(function (id) { return data.query.pages[id].title; });
        }
        return [];
    });
}
exports.getRedirects = getRedirects;
function getError(data) {
    return data && data.error && new Error(data.error.info || 'Wikidata Api Error') || new Error('NO error');
}
function hasError(data) {
    return !!data.error;
}
function getStringArrayParam(value, def) {
    if (def === void 0) { def = null; }
    if (!value || value.length === 0) {
        return def;
    }
    return value;
}
